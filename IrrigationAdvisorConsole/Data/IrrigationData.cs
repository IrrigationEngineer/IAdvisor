using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using IrrigationAdvisor.Models.Agriculture;
using IrrigationAdvisor.Models.Data;
using IrrigationAdvisor.Models.Irrigation;
using IrrigationAdvisor.Models.Language;
using IrrigationAdvisor.Models.Localization;
using IrrigationAdvisor.Models.Management;
using IrrigationAdvisor.Models.Security;
using IrrigationAdvisor.Models.Utilities;
using IrrigationAdvisor.Models.Water;
using IrrigationAdvisor.Models.Weather;

using IrrigationAdvisor.DBContext;

namespace IrrigationAdvisorConsole.Data
{
    public static class IrrigationData
    {

        #region IrrigationData

        #region DCA El Paraiso

        #endregion
        #region DCA La Perdiz

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 1 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/09/30 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 09, 30);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 2 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/12/06 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 3 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/12/06 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 13-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 5 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/12/06 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 6 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot6_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz6
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/09/30 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 09, 30);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 7 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot7_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz7
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/16 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion      
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion      
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No Irrigation until 18-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 10a for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot10a_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz10a
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/08 6 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 08);
                lIrrigationQuantity = 06;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 10b for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot10b_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz10b
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/09/30 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 09, 30);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 14 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot14_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz14
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/16 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. First Irrigation 14-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - La Perdiz Pivot 15 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCALaPerdizPivot15_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCALaPerdiz
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCALaPerdiz15
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/09/30 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 09, 30);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        #endregion

        #endregion
        #region DCA San Jose

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - San Jose Pivot 1 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCASanJosePivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCASanJose
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCASanJose1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion


            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 04 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation Ok.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - San Jose Pivot 2 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCASanJosePivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCASanJose
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCASanJose2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/14 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 14);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 06 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 6;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Riego el 15-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se mueve el Riego al 15-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se mueve el Riego al 24-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se mueve el Riego al 24-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/24 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 24);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion


        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - San Jose Pivot 3 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCASanJosePivot3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCASanJose
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCASanJose3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/14 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 14);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 05 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 5;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
          

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DCA - San Jose Pivot 4 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDCASanJosePivot4_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDCASanJose
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDCASanJose4
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/12/04 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        #endregion

        #endregion

        #region Del Lago - San Pedro

        #region 2017
        
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 1 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 2 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 3 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 4 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot4_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro4
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 5 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 7.3 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/12 7.3 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 2.4 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 2.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 18 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 18;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 6 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot6_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro6
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/09 7.2 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 09);
                lIrrigationQuantity = 7.2;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/10 03 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 3.6 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 3.6;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 3.6 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 3.6;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 03 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 09 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 9;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK. Updated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 7 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot7_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro7
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/09 8.6 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 09);
                lIrrigationQuantity = 8.6;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/10 8.6 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 8.6;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/16 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 3.5 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 3.5;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 3.5 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 3.5;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 03 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 3.5 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 3.5;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 3.5 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 3.5;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 8 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot8_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro8
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 9 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot9_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro9
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 10 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot10_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro10
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 11 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot11_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro11
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 12 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot12_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro12
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 13 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot13_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro13
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 14 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot14_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro14
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 15 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot15_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro15
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 16 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot16_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro16
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }
        /// <summary>
        /// Add IrrigationQuantity Data to DelLago San Pedro Pivot 17 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoSanPedroPivot17_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoSanPedro
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoSanPedro17
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/10 7.3 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 7.3;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        #endregion

        #endregion
        #region Del Lago - El Mirador

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 1 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/08 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 08);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 14 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 2 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/09 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 09);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion


        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 3 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 4 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot4_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador4
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/12 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 12);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/09 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 09);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 5 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/12 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 07-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 6 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot6_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador6
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/12 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 12);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/12 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 7 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot7_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador7
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/15 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 8 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot8_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador8
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/14 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 14);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 9 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot9_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador9
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/14 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 14);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/12 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 06-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 10 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot10_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador10
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 24-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion


        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 11 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot11_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador11
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/13 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 12 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot12_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador12
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 13 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot13_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador13
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/14 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 14);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByHydricBalance);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 14 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot14_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador14
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/12/02 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 05-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/24 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 24);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot 15 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivot15_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMirador15
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/13 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot Chaja 1 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivotChaja1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMiradorChaja1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/09 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 09);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 29-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 29-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 29-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 29-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to DelLago El Mirador Pivot Chaja 2 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataDelLagoElMiradorPivotChaja2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmDelLagoElMirador
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotDelLagoElMiradorChaja2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/13 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 01-DEC-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Riego el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 14 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        #endregion

        #endregion

        #region GMO - La Palma

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/28 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. No se riega el 19-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. No se riega el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 2 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 11);
                lIrrigationQuantity = 08;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/10/31 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 31);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 3 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/12 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 12);
                lIrrigationQuantity = 08;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/10/28 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 28);
                lIrrigationQuantity = 08;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/10/31 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 31);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 29-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 10 mm - Irrigation Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 4 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot4_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma4
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/12 13 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 12);
                lIrrigationQuantity = 13;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/10/28 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 28);
                lIrrigationQuantity = 08;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/10/31 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 31);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/14 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 14);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/17 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 29-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
           
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 1.1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot1_1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma1_1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/11 09 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 11);
                lIrrigationQuantity = 09;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/10/31 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 31);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/11 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 20 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 20;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Falla en sistema de riego del 26-Nov-17 al 27-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 20-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 2.1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot2_1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma2_1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/12/02 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 04-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 06-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 19-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 3.1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot3_1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma3_1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion          
            #region Irrigation 2017/12/02 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion          
            #region Irrigation 2017/12/04 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 06-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion          
            #region Irrigation 2017/12/06 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 19-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO La Palma Pivot 4.1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOLaPalmaPivot4_1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOLaPalma
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOLaPalma4_1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 01-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion          
            #region Irrigation 2017/12/04 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 06-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion          
            #region Irrigation 2017/12/06 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Riego el 19-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            
        }

        #endregion

        #endregion
        #region GMO - El Tacuru

        #region 2017
        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 1a for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot1a_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieAlfalfaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru1a
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/09/28 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 09, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 13-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 13-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 1b for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot1b_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru1b
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/17 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            
            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 2a for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot2a_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru2a
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/12 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/15 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/16 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 13-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 13-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 13-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK. Updated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK. Updated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 2b for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot2b_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru2b
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/12 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 12);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/16 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 3a for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot3a_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru3a
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/11 8 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 11);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/13 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 6.6 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 6.6;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 08;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 14-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 14-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se riega el 14-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK. Updated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 3b for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot3b_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru3b
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/19 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/20 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 20);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 3 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot4_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru4
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            /****
             * de:	Esteban Molina <emolina@timbertec.com.uy>
             *  para:	Rodolfo Olivera <rodo.oli@gmail.com>,
             *  Gonzalo Moreno <gmoreno@pgwwater.com.uy>
             *  Cc:	riegopggw@googlegroups.com
             *  fecha:	17 de diciembre de 2017, 18:37
             * Los 4 riegos de 10mm en el pivot 4 que aparecen desde el principio no se realizaron.
             * 
             * Respuesta:
             *  Ok, quito los riegos del 17/10, 20/10, 25/10 y 30/10 para el Pivot 4 de El Tacurú.
             *  Primer riego 4/12.
             ****/
            #region Irrigation 2017/11/16 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. No hubo riego del 17-Nov-17 al 30-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se ha movido riego del 01-Dic-17 al 04-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se ha movido riego del 01-Dic-17 al 04-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Se ha movido riego del 01-Dic-17 al 04-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 5 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/13 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 13);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 08;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 8.4 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 8 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot8_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru8
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/01 08 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 01);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/09 8.4 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 09);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/10 12 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 10);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/15 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/17 8.4 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/18 8.4 mm 
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 18);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Proximo riego el 26-Nov-17";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Proximo riego el 26-Nov-17";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.MoveIrrigation;
                lObservations = "Cant Irrigate. Proximo riego el 26-Nov-17";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 8.4 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 8.4 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 8.4 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 8.4 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 8.4;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK. Updated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 9 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot9_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru9
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/19 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/20 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 20);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to GMO El Tacuru Pivot 10 for 2017-17
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataGMOElTacuruPivot10_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;

            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmGMOElTacuru
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaNorthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotGMOElTacuru10
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/19 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 19);
                lIrrigationQuantity = 8;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 12 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 12;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            /*
             * de:	iadvisor@pgwwater.com.uy
             *   para:	alertasinriego@pgwwater.com.uy
             *   fecha:	24 de diciembre de 2017, 9:13
             *   asunto:	Contacto desde página de Esteban
             * Semana del 18 al 23 no se realizaron riegos en soja. Le cargué como intervalo sin riego pero lo guardó con fecha a partir de hoy domingo 24. Email de contacto: emolina@timbertec.com.uy
             * 
             * Respuesta:
             * La soja no fue regada desde el 18/12 al 23/12. Hoy 24/12 se va a regar?
             * Se quita el periodo de no riego y se ingresa periodo de no riego entre el 18 y el 23.
             * 
             * */
            #region Irrigation 2017/12/17 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 17);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.RainForecast;
                lObservations = "Cant Irrigate. Periodo que no se riega, del 18-Dec al 23-Dec.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/29 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 29);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/31 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 31);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se rompio el sistema de riego.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        #endregion

        #endregion

        #region TM - Tres Marias

        #endregion

        #region LR - La Rinconada

        #endregion

        #region ER - El Rincon

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to El Rincon Pivot 1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataElRinconPivot1a_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmElRincon
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotElRincon1a
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/17 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 08 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 11-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 11-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 11-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/14 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 14);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion            

        }

        /// <summary>
        /// Add IrrigationQuantity Data to El Rincon Pivot 2 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataElRinconPivot1b_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmElRincon
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSoyaSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotElRincon1b
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/25 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se mueve riego para el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se mueve riego para el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/03 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 03);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se mueve riego para el 04-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/04 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 04);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/06 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 06);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se mueve riego para el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se mueve riego para el 08-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/08 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 08);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se mueve riego para el 09-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 05 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 5;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/16 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 16);
                lIrrigationQuantity = 7;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion            
        }

        #endregion

        #endregion

        #region ED - El Desafio

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to El Desafio Pivot 1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataElDesafioPivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmElDesafio
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotElDesafio1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/28 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/16 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 16);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 23 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 23;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 23 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 23;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 14 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 07;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 23 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 23;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        /// <summary>
        /// Add IrrigationQuantity Data to El Desafio Pivot 2 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataElDesafioPivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmElDesafio
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotElDesafio2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/30 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 30);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/02 23 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 02);
                lIrrigationQuantity = 23;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 23 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 23;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 07 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 07;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        #endregion

        #endregion

        #region LN - Los Naranjales

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to Los Naranjales Pivot 6aT3 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataLosNaranjalesPivot6aT3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmLosNaranjales
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotLosNaranjales6aT3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/06 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 06);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/22 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 22);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 30 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 30;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to Los Naranjales Pivot 6bT3 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataLosNaranjalesPivot6bT3_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmLosNaranjales
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotLosNaranjales6bT3
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/06 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 06);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/24 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 24);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/05 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 05);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 30 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 30;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to Los Naranjales Pivot 5aT5 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataLosNaranjalesPivot5aT5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmLosNaranjales
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieFescueForageSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotLosNaranjales5aT5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/15 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/21 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 21);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/27 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 27);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 28-Nov-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/28 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 30 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 30;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/18 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 18);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/19 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 19);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 27-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/27 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 27);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        /// <summary>
        /// Add IrrigationQuantity Data to Los Naranjales Pivot 5bT5 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataLosNaranjalesPivot5bT5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmLosNaranjales
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotLosNaranjales5bT5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/15 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 15);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/26 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 26);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 10 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/10 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 10);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se riega el 12-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/12 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 12);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/15 30 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 15);
                lIrrigationQuantity = 30;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 14 mm - Calculated Irrigation
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 14;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        }

        #endregion

        #endregion

        #region SE - SantaEmilia

        #region 2017

        /// <summary>
        /// Add IrrigationQuantity Data to Santa Emilia Pivot 1 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataSantaEmiliaPivot1_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmSantaEmilia
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotSantaEmilia1
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/10/28 10 mm - Calculated
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 10, 28);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.IrrigationByETCAcumulated);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
        

        }

        /// <summary>
        /// Add IrrigationQuantity Data to Santa Emilia Pivot 2 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataSantaEmiliaPivot2_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmSantaEmilia
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotSantaEmilia2
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/09/01 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 09, 01);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.IrrigationSystemFail;
                lObservations = "Cant Irrigate. Se riega el 02-Dec-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            
        }

        /// <summary>
        /// Add IrrigationQuantity Data to Santa Emilia Pivot 5 for 2017-2018
        /// </summary>
        /// <param name="context"></param>
        public static void AddIrrigationDataSantaEmiliaPivot5_2017(IrrigationAdvisorContext context, DateTime pDateOfReference)
        {
            #region context
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lToday = pDateOfReference;
            Pair<double, Utils.WaterInputType> lQuantityOfWaterToIrrigateAndTypeOfIrrigation;
            bool lIsExtraIrrigation;
            DateTime lIrrigationDate;
            double lIrrigationQuantity = 0;
            List<Irrigation> lIrrigationList;
            List<Rain> lRainList;
            Utils.NoIrrigationReason lReason;
            String lObservations;


            lFarm = (from farm in context.Farms
                     where farm.Name == Utils.NameFarmSantaEmilia
                     select farm).FirstOrDefault();
            lCrop = (from crop in context.Crops
                     where crop.Name == Utils.NameSpecieCornSouthShort
                     select crop).FirstOrDefault();
            lIrrigationUnit = (from iu in context.Pivots
                               where iu.Name == Utils.NamePivotSantaEmilia5
                               select iu).FirstOrDefault();
            lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                          where ciw.CropId == lCrop.CropId
                                              && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                              && ciw.SowingDate <= pDateOfReference
                                              && ciw.HarvestDate.Year >= pDateOfReference.Year
                                          select ciw).ToList<CropIrrigationWeather>();
            #endregion

            #region Irrigation 2017/11/17 10 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 17);
                lIrrigationQuantity = 10;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/25 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 25);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/11/29 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 11, 29);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/01 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 01);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/07 20 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 07);
                lIrrigationQuantity = 20;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/09 20 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 09);
                lIrrigationQuantity = 20;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/11 20 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 11);
                lIrrigationQuantity = 20;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/13 20 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 13);
                lIrrigationQuantity = 20;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/20 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 20);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se mueve el riego para el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/21 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 21);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se mueve el riego para el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/22 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 22);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se mueve el riego para el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/23 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 23);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se mueve el riego para el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/24 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 24);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se mueve el riego para el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/25 00 mm - Can't Irrigate
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 25);
                lIrrigationQuantity = 0;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.CropDontNeedIrrigation;
                lObservations = "Cant Irrigate. Se mueve el riego para el 26-Dic-17.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.CantIrrigate);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/26 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 26);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Add Irrigation OK.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion
            #region Irrigation 2017/12/28 15 mm
            foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
            {
                //Data to change about Irrigation
                lIrrigationDate = new DateTime(2017, 12, 28);
                lIrrigationQuantity = 15;
                lIsExtraIrrigation = true;
                lReason = Utils.NoIrrigationReason.Other;
                lObservations = "Calculated Irrigation.";
                /////////////////////////////////////////////////////////////////////////////////////////////
                lIrrigationList = (from ilist in context.Irrigations
                                   where ilist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                                   select ilist).ToList<Irrigation>();
                lRainList = (from rlist in context.Rains
                             where rlist.CropIrrigationWeatherId == lCropIrrigationWeather.CropIrrigationWeatherId
                             select rlist).ToList<Rain>();
                lQuantityOfWaterToIrrigateAndTypeOfIrrigation = new Pair<double, Utils.WaterInputType>(lIrrigationQuantity, Utils.WaterInputType.Irrigation);
                lCropIrrigationWeather.AddOrUpdateIrrigationDataToList(lIrrigationDate, lQuantityOfWaterToIrrigateAndTypeOfIrrigation, lIsExtraIrrigation, lReason, lObservations);
            }
            #endregion

        }

        #endregion

        #endregion

        #endregion

    }
}
